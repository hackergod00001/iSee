# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: iSee CI/CD - Beta V1.0.0

on:
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main", "develop", "master" ]

env:
  XCODE_VERSION: '15.0'
  MACOS_VERSION: 'macos-13'

jobs:
  build:
    name: Build and Test iSee
    runs-on: ${{ env.MACOS_VERSION }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract version from README
      id: get_version
      run: |
        VERSION=$(grep -m 1 "Version:" README.md | sed 's/.*Version: //' | sed 's/\*\*//' | xargs)
        if [ -z "$VERSION" ]; then
          VERSION="Beta-V1.0.0"
        fi
        echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
        echo "Version detected: $VERSION"
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Show Xcode version
      run: |
        xcodebuild -version
        echo "Building iSee ${{ env.APP_VERSION }}"
      
    - name: Show Swift version
      run: swift --version
      
    - name: Cache Swift packages
      uses: actions/cache@v3
      with:
        path: |
          .build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Clean build folder
      run: |
        if [ -d "build" ]; then
          rm -rf build
        fi
    
    - name: Build project
      run: |
        xcodebuild clean build \
          -project isee.xcodeproj \
          -scheme isee \
          -destination 'platform=macOS' \
          -configuration Debug \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Run tests (if available)
      continue-on-error: true
      run: |
        xcodebuild test \
          -project isee.xcodeproj \
          -scheme isee \
          -destination 'platform=macOS' \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
    
    - name: Archive build logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs
        path: |
          ~/Library/Logs/DiagnosticReports/
          *.log
        retention-days: 7

  lint:
    name: Swift Lint and Code Quality
    runs-on: ${{ env.MACOS_VERSION }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract version from README
      run: |
        VERSION=$(grep -m 1 "Version:" README.md | sed 's/.*Version: //' | sed 's/\*\*//' | xargs)
        echo "APP_VERSION=${VERSION:-Beta-V1.0.0}" >> $GITHUB_ENV
      
    - name: Install SwiftLint
      run: |
        brew install swiftlint
    
    - name: Run SwiftLint
      continue-on-error: true
      run: |
        echo "Running SwiftLint on iSee ${{ env.APP_VERSION }}..."
        swiftlint lint --reporter github-actions-logging
        
    - name: Check Swift file count
      run: |
        echo "=== Swift Files Summary ==="
        CORE_FILES=$(find . -name "*.swift" -not -path "*/NotchNotification/*" -not -path "*/.*" | wc -l | xargs)
        NOTCH_FILES=$(find NotchNotification -name "*.swift" 2>/dev/null | wc -l | xargs)
        echo "Core iSee files: $CORE_FILES"
        echo "NotchNotification framework files: $NOTCH_FILES"
        echo "Total Swift files: $((CORE_FILES + NOTCH_FILES))"
        
  security-scan:
    name: Security and Privacy Scan
    runs-on: ${{ env.MACOS_VERSION }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract version from README
      run: |
        VERSION=$(grep -m 1 "Version:" README.md | sed 's/.*Version: //' | sed 's/\*\*//' | xargs)
        echo "APP_VERSION=${VERSION:-Beta-V1.0.0}" >> $GITHUB_ENV
      
    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential secrets in iSee ${{ env.APP_VERSION }}..."
        if grep -r "API_KEY\|SECRET\|PASSWORD" --include="*.swift" . --exclude-dir=NotchNotification; then
          echo "‚ö†Ô∏è  Warning: Found potential hardcoded secrets"
          exit 1
        else
          echo "‚úÖ No hardcoded secrets found"
        fi
      continue-on-error: true
      
    - name: Check Info.plist configuration
      run: |
        if [ -f "Info.plist" ]; then
          echo "‚úÖ Info.plist exists"
          plutil -lint Info.plist
          echo ""
          echo "=== Camera Permission ==="
          plutil -extract NSCameraUsageDescription raw Info.plist || echo "NSCameraUsageDescription not found"
        else
          echo "‚ùå Info.plist not found"
          exit 1
        fi
        
    - name: Verify NotchNotification framework integrity
      run: |
        echo "=== NotchNotification Framework Check ==="
        if [ -d "NotchNotification" ]; then
          NOTCH_COUNT=$(find NotchNotification -name "*.swift" | wc -l | xargs)
          echo "‚úÖ NotchNotification framework present ($NOTCH_COUNT files)"
          echo "Framework files:"
          ls -1 NotchNotification/*.swift
        else
          echo "‚ùå NotchNotification framework missing!"
          exit 1
        fi

  build-release:
    name: Build Release DMG
    runs-on: ${{ env.MACOS_VERSION }}
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract version from README
      run: |
        VERSION=$(grep -m 1 "Version:" README.md | sed 's/.*Version: //' | sed 's/\*\*//' | xargs)
        echo "APP_VERSION=${VERSION:-Beta-V1.0.0}" >> $GITHUB_ENV
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: Build Release
      run: |
        echo "Building iSee ${{ env.APP_VERSION }} for release..."
        xcodebuild clean build \
          -project isee.xcodeproj \
          -scheme isee \
          -destination 'platform=macOS' \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO
        
        echo "‚úÖ Release build completed"
    
    - name: Verify build output
      run: |
        echo "=== Build Output ==="
        BUILD_DIR=$(find ~/Library/Developer/Xcode/DerivedData -name "isee.app" -type d 2>/dev/null | head -1)
        if [ -n "$BUILD_DIR" ]; then
          echo "‚úÖ iSee.app found at: $BUILD_DIR"
          ls -lh "$BUILD_DIR"
        else
          echo "‚ùå iSee.app not found"
        fi
    
    - name: Create DMG
      continue-on-error: true
      run: |
        if [ -f "scripts/create_dmg.sh" ]; then
          echo "Creating DMG for iSee ${{ env.APP_VERSION }}..."
          chmod +x scripts/create_dmg.sh
          ./scripts/create_dmg.sh
          echo "‚úÖ DMG creation completed"
        else
          echo "‚ö†Ô∏è  scripts/create_dmg.sh not found, skipping DMG creation"
        fi
    
    - name: Upload DMG artifact
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: iSee-${{ env.APP_VERSION }}
        path: '*.dmg'
        retention-days: 30
        
  project-info:
    name: iSee Project Information
    runs-on: ${{ env.MACOS_VERSION }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Extract version from README
      run: |
        VERSION=$(grep -m 1 "Version:" README.md | sed 's/.*Version: //' | sed 's/\*\*//' | xargs)
        echo "APP_VERSION=${VERSION:-Beta-V1.0.0}" >> $GITHUB_ENV
      
    - name: Display project overview
      run: |
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        echo "‚ïë          iSee - Shoulder Surfer Detection App                ‚ïë"
        echo "‚ïë               Version: ${{ env.APP_VERSION }}                ‚ïë"
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        echo ""
        echo "Privacy-first macOS app with Dynamic Island-style notifications"
        echo ""
        
    - name: Display core Swift files
      run: |
        echo "=== Core Swift Files ==="
        echo ""
        echo "üì± App Lifecycle:"
        ls -1 iseeApp.swift AppDelegate.swift 2>/dev/null || echo "Missing"
        echo ""
        echo "üñ•Ô∏è  Menu Bar & UI:"
        ls -1 MenuBarController.swift MenuBarView.swift SettingsView.swift SettingsWindow.swift 2>/dev/null || echo "Missing"
        echo ""
        echo "üì∑ Camera & Vision:"
        ls -1 CameraManager.swift CameraOverlayView.swift CameraNotchManager.swift VisionProcessor.swift 2>/dev/null || echo "Missing"
        echo ""
        echo "‚öôÔ∏è  Background Services:"
        ls -1 BackgroundMonitoringService.swift StateController.swift NotificationManager.swift PreferencesManager.swift LaunchAtLoginManager.swift 2>/dev/null || echo "Missing"
        echo ""
        
    - name: Display NotchNotification framework
      run: |
        echo "=== NotchNotification Framework (Dynamic Island UI) ==="
        if [ -d "NotchNotification" ]; then
          NOTCH_COUNT=$(ls -1 NotchNotification/*.swift 2>/dev/null | wc -l | xargs)
          echo "Total files: $NOTCH_COUNT"
          echo ""
          ls -1 NotchNotification/*.swift 2>/dev/null | sed 's|NotchNotification/||' || echo "No files found"
        else
          echo "‚ùå NotchNotification directory not found"
        fi
        echo ""
        
    - name: Count Swift files
      run: |
        echo "=== Swift Files Summary ==="
        CORE_COUNT=$(find . -name "*.swift" -not -path "*/NotchNotification/*" -not -path "*/.*" | wc -l | xargs)
        NOTCH_COUNT=$(find NotchNotification -name "*.swift" 2>/dev/null | wc -l | xargs)
        TOTAL=$((CORE_COUNT + NOTCH_COUNT))
        echo "Core iSee files: $CORE_COUNT"
        echo "NotchNotification framework: $NOTCH_COUNT"
        echo "Total Swift files: $TOTAL"
        echo ""
        
    - name: Check documentation
      run: |
        echo "=== Documentation Files ==="
        if ls *.md 1> /dev/null 2>&1; then
          MD_COUNT=$(ls -1 *.md | wc -l | xargs)
          echo "Total markdown files: $MD_COUNT"
          echo ""
          echo "Key documentation:"
          ls -1 README.md LICENSE CONTRIBUTING.md TESTING_GUIDE.md QUICK_REFERENCE.md 2>/dev/null || echo "Some files missing"
        else
          echo "No markdown files found"
        fi
        echo ""
        
    - name: Check project configuration
      run: |
        echo "=== Project Configuration ==="
        echo "Xcode project: $([ -f isee.xcodeproj/project.pbxproj ] && echo '‚úÖ Found' || echo '‚ùå Missing')"
        echo "Info.plist: $([ -f Info.plist ] && echo '‚úÖ Found' || echo '‚ùå Missing')"
        echo "GitHub workflow: $([ -f .github/workflows/swift.yml ] && echo '‚úÖ Found' || echo '‚ùå Missing')"
        echo "DMG creation script: $([ -f scripts/create_dmg.sh ] && echo '‚úÖ Found' || echo '‚ùå Missing')"
        echo ""

  sync-to-master:
    name: Sync Main ‚Üí Master
    runs-on: ${{ env.MACOS_VERSION }}
    needs: [build, lint, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Extract version from README
      run: |
        VERSION=$(grep -m 1 "Version:" README.md | sed 's/.*Version: //' | sed 's/\*\*//' | xargs)
        echo "APP_VERSION=${VERSION:-Beta-V1.0.0}" >> $GITHUB_ENV
      
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        echo "Git configured for automated sync"
    
    - name: Sync main to master
      run: |
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        echo "‚ïë    Syncing iSee ${{ env.APP_VERSION }} to Master      ‚ïë"
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        echo ""
        
        echo "üì¶ Fetching latest changes..."
        git fetch origin main
        git fetch origin master || git checkout -b master
        
        echo "üîÑ Switching to master branch..."
        git checkout master
        
        echo "‚¨ÜÔ∏è  Merging main into master (main takes precedence)..."
        git merge origin/main --no-edit --strategy-option=theirs || {
          echo "‚ùå Merge failed, attempting to resolve..."
          git merge --abort
          git reset --hard origin/main
        }
        
        echo "üöÄ Pushing to master..."
        git push origin master
        
        echo "‚úÖ Successfully synced iSee ${{ env.APP_VERSION }} to master!"
    
    - name: Verify sync
      run: |
        echo "=== Sync Verification ==="
        echo ""
        echo "Master Branch (latest commit):"
        git log -1 --oneline master
        echo ""
        echo "Main Branch (latest commit):"
        git log -1 --oneline origin/main
        echo ""
        echo "Branches are now in sync! üéâ"
        
    - name: Summary
      run: |
        echo ""
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        echo "‚ïë              CI/CD Pipeline Complete ‚úÖ                ‚ïë"
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        echo ""
        echo "‚úì Build successful"
        echo "‚úì Linting passed"
        echo "‚úì Security scan passed"
        echo "‚úì Master branch synced"
        echo ""
        echo "iSee ${{ env.APP_VERSION }} is ready! üöÄ"

